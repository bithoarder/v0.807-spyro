[mcu display]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_0E0003800143535031303820-if00
restart_method: command

[display]
lcd_type: sh1106
i2c_mcu: display
i2c_bus: i2c1a
encoder_pins: ^display:PA3, ^display:PA4
click_pin: ^!display:PA1
kill_pin: ^!display:PA5
encoder_steps_per_detent: 2
x_offset: 2
#   Use X offset to shift the display towards the right. Value can be 0 to 3
vcomh: 31
#   Set the Vcomh value on SSD1306/SH1106 displays. This value is
#   associated with a "smearing" effect on some OLED displays. The
#   value may range from 0 to 63. Default is 0.
#   Adjust this value if you get some vertical stripes on your display. (31 seems to be a good value)
menu_timeout: 30
display_group: main
menu_root: main

[neopixel display]
pin: display:PA0
chain_count: 1
color_order: GRB
initial_RED: 0.01
initial_GREEN: 0.01
initial_BLUE: 0.01

####################################################################################################

[display_data main extruder]
position: 0, 0
text:
  {% set active_extruder = printer.toolhead.extruder %}
  { render("_heater_temperature", param_heater_name=active_extruder) }

[display_data main fan]
position: 0, 10
text: { render("_fan_speed") }

[display_data main heater_bed]
position: 1, 0
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data main speed_factor]
position: 1, 10
text:
  ~feedrate~
  { "{:>4.0%}".format(printer.gcode_move.speed_factor) }

[display_data main enclosure_temp]
position: 2, 0
text: ~enclosure~{ "%3.0f" % (printer['temperature_sensor enclosure'].temperature ) }~degrees~

[display_data main print_progress]
position: 2, 6
text: { "{:^10.0%}".format(printer.display_status.progress) }
[display_data main progress_bar]
position: 3, 0 # Draw graphical progress bar after text is written
text: { draw_progress_bar(2, 6, 10, printer.display_status.progress) }

[display_data main print_status]
position: 3, 0
text: { render("_print_status") }

[display_template _print_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    ~voron_logo~Voron V0.807
  {% endif %}

[display_glyph enclosure]
data:
  ................
  ................
  ...*********....
  .**.........*...
  .*************..
  .*...........*..
  .*...........*..
  .*...........*..
  .*...........*..
  .*...........*..
  .*...........*..
  .*.*********.*..
  .**.........**..
  .*************..
  ................
  ................

[display_glyph voron_logo]
data:
  ................
  ......**........
  ....******......
  ..**..**..**....
  ****..**..****..
  ***..**..*****..
  ***..**..*****..
  **..**..**..**..
  **..**..**..**..
  *****..**..***..
  *****..**..***..
  ****..**..****..
  ..**..**..**....
  ....******......
  ......**........
  ................

####################################################################################################
