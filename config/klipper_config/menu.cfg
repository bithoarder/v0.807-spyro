[menu main]
type: list
name: Main


### Pause ###

[menu main paused]
type: list
enable: {printer.pause_resume.is_paused}
name: Paused...

### Tune ###

[menu main tune]
type: list
enable: {printer.idle_timeout.state == 'Printing'}
name: Tune

[menu main tune speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu main tune flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu main tune offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1


### SD Card ###

[menu main sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: SD Card

[menu main sdcard start]
type: command
enable: {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name: Start printing
gcode: M24

[menu main sdcard resume]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == 'paused'}
name: Resume printing
gcode:
    {% if 'pause_resume' in printer %}
        RESUME
    {% else %}
        M24
    {% endif %}

[menu main sdcard pause]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == 'printing'}
name: Pause printing
gcode:
    {% if 'pause_resume' in printer %}
        PAUSE
    {% else %}
        M25
    {% endif %}

[menu main sdcard cancel]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == 'printing' or printer.print_stats.state == 'paused')}
name: Cancel printing
gcode: CANCEL_PRINT


### Control ###

[menu main control]
type: list
name: Control

[menu main control home]
type: command
enable: {not printer.idle_timeout.state == 'Printing'}
name: Home All
gcode: G28

[menu main control disable]
type: command
name: Steppers off
gcode:
    M84
    M18

[menu main control fanspeed]
type: input
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode: M106 S{'%d' % (menu.input*255)}

[menu main control light]
type: command
name: Lights: {'OFF' if printer['gcode_macro CASE_LIGHT'].mode=='OFF' else 'ON'}
#input: {printer['output_pin light'].value}
#input_min: 0
#input_max: 1
#input_step: 1
gcode: CASE_LIGHT MODE={'ON' if printer['gcode_macro CASE_LIGHT'].mode=='OFF' else 'OFF'}

[menu main control centerxy]
type: command
enable: {printer.idle_timeout.state!='Printing' and printer.toolhead.homed_axes=='xyz'}
name: Center XY
gcode:
  {% set MAX_X = printer.configfile.settings.stepper_x.position_max %}
  {% set MAX_Y = printer.configfile.settings.stepper_y.position_max %}
  SAVE_GCODE_STATE NAME=center
  G90 ; absolute coordinates
  G0 X{MAX_X/2} Y{MAX_Y/2} F6000
  RESTORE_GCODE_STATE NAME=center

[menu main control dropbed]
type: command
enable: {printer.idle_timeout.state!='Printing' and printer.toolhead.homed_axes=='xyz'}
name: Bed down
gcode:
  {% set MAX_Z = printer.configfile.settings.stepper_z.position_max %}
  SAVE_GCODE_STATE NAME=dropbed
  G90 ; absolute coordinates
  G0 Z{MAX_Z-5} F1000
  RESTORE_GCODE_STATE NAME=dropbed

### Control / Bedscrew ###

[menu main control bedscrew]
type: list
name: Adjust bedscrews
enable: {printer.idle_timeout.state|lower != 'printing'}

[menu main control bedscrew testprint]
type: command
name: Test print
enable: {printer.extruder.can_extrude}
gcode: 
  FIRST_LAYER_TEST
  { menu.exit() }

[menu main control bedscrew start]
type: command
name: Start
#enable: # todo: possible to check to see if BED_SCREWS_ADJUST is in progress?
gcode:
  {% if not 'xyz' in printer.toolhead.homed_axes %}
    G28 ; home
  {% endif %}
  BED_SCREWS_ADJUST

[menu main control bedscrew accept]
type: command
name: Accept
#enable: # todo: possible to check to see if BED_SCREWS_ADJUST is in progress?
gcode: ACCEPT

[menu main control bedscrew adjusted]
type: command
name: Adjusted
#enable: # todo: possible to check to see if BED_SCREWS_ADJUST is in progress?
gcode: ADJUSTED

[menu main control bedscrew abort]
type: command
name: Abort
#enable: # todo: possible to check to see if BED_SCREWS_ADJUST is in progress?
gcode: ABORT

### Control / Shutdown ###

[menu main control shutdown]
type: list
enable: {printer.idle_timeout.state != 'Printing'}
name: Shutdown

[menu main control shutdown no]
type: command
name: Sure? no
gcode:
  { menu.exit() }

[menu main control shutdown yes]
type: command
name: Sure? YES
gcode:
  { action_respond_info('Powering off!!!') }
  CASE_LIGHT MODE=idle
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
  M400 ; wait for buffer to clear
  G4 P1000 ; sleep 1s
  { action_call_remote_method('shutdown_machine') }
  { menu.exit() }

[menu main control shutdown reboot]
type: command
name: Reboot
gcode:
  { action_respond_info('Rebooting') }
  CASE_LIGHT MODE=idle
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
  M400 ; wait for buffer to clear
  G4 P1000 ; sleep 1s
  { action_call_remote_method('reboot_machine') }
  { menu.exit() }

### Temperature ###

[menu main temp]
type: list
name: Temperature

[menu main temp coolall]
type: command
enable: {printer.extruder.target > 0 and printer.heater_bed.target > 0}
name: Cooldown all
gcode:
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
  { menu.exit() }

[menu main temp coolextruder]
type: command
enable: {printer.extruder.target > 0}
name: Cooldown hotend
gcode:
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  { menu.exit() }

[menu main temp coolbed]
type: command
enable: {printer.heater_bed.target > 0}
name: Cooldown bed
gcode:
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
  { menu.exit() }

[menu main temp hotend_target]
type: input
name: {"Ex:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: SET_HEATER_TEMPERATURE HEATER=extruder TARGET={'%.0f' % menu.input}

[menu main temp hotbed_target]
type: input
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={'%.0f' % menu.input}


### Filament ###

[menu main filament]
type: list
name: Filament

[menu main filament unload]
type: list
name: Unload
[menu main filament load]
type: list
name: Load

[menu main filament unload pla]
type: command
name: PLA
gcode: 
  UNLOAD MIN_TEMP=180 TEMP=215
  { menu.exit() }
[menu main filament load pla]
type: command
name: PLA
gcode: 
  LOAD MIN_TEMP=180 TEMP=215
  { menu.exit() }

[menu main filament unload petg]
type: command
name: PETG
gcode: 
  UNLOAD MIN_TEMP=230 TEMP=250
  { menu.exit() }
[menu main filament load petg]
type: command
name: PETG
gcode: 
  LOAD MIN_TEMP=230 TEMP=250
  { menu.exit() }

[menu main filament unload abs]
type: command
name: ABS
gcode: 
  UNLOAD MIN_TEMP=220 TEMP=250
  { menu.exit() }
[menu main filament load abs]
type: command
name: ABS
gcode: 
  LOAD MIN_TEMP=220 TEMP=250
  { menu.exit() }

[menu main filament unload nylon]
type: command
name: Nylon
gcode: 
  UNLOAD MIN_TEMP=230 TEMP=260
  { menu.exit() }
[menu main filament load nylon]
type: command
name: Nylon
gcode: 
  LOAD MIN_TEMP=230 TEMP=260
  { menu.exit() }
